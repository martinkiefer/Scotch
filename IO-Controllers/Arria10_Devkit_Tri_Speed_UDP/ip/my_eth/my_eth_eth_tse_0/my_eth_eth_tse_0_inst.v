	my_eth_eth_tse_0 u0 (
		.ff_tx_clk      (_connected_to_ff_tx_clk_),      //   input,   width = 1,     transmit_clock_connection.clk
		.ff_rx_clk      (_connected_to_ff_rx_clk_),      //   input,   width = 1,      receive_clock_connection.clk
		.ff_rx_data     (_connected_to_ff_rx_data_),     //  output,  width = 32,                       receive.data
		.ff_rx_eop      (_connected_to_ff_rx_eop_),      //  output,   width = 1,                              .endofpacket
		.rx_err         (_connected_to_rx_err_),         //  output,   width = 6,                              .error
		.ff_rx_mod      (_connected_to_ff_rx_mod_),      //  output,   width = 2,                              .empty
		.ff_rx_rdy      (_connected_to_ff_rx_rdy_),      //   input,   width = 1,                              .ready
		.ff_rx_sop      (_connected_to_ff_rx_sop_),      //  output,   width = 1,                              .startofpacket
		.ff_rx_dval     (_connected_to_ff_rx_dval_),     //  output,   width = 1,                              .valid
		.ff_tx_data     (_connected_to_ff_tx_data_),     //   input,  width = 32,                      transmit.data
		.ff_tx_eop      (_connected_to_ff_tx_eop_),      //   input,   width = 1,                              .endofpacket
		.ff_tx_err      (_connected_to_ff_tx_err_),      //   input,   width = 1,                              .error
		.ff_tx_mod      (_connected_to_ff_tx_mod_),      //   input,   width = 2,                              .empty
		.ff_tx_rdy      (_connected_to_ff_tx_rdy_),      //  output,   width = 1,                              .ready
		.ff_tx_sop      (_connected_to_ff_tx_sop_),      //   input,   width = 1,                              .startofpacket
		.ff_tx_wren     (_connected_to_ff_tx_wren_),     //   input,   width = 1,                              .valid
		.xon_gen        (_connected_to_xon_gen_),        //   input,   width = 1,           mac_misc_connection.xon_gen
		.xoff_gen       (_connected_to_xoff_gen_),       //   input,   width = 1,                              .xoff_gen
		.ff_tx_crc_fwd  (_connected_to_ff_tx_crc_fwd_),  //   input,   width = 1,                              .ff_tx_crc_fwd
		.ff_tx_septy    (_connected_to_ff_tx_septy_),    //  output,   width = 1,                              .ff_tx_septy
		.tx_ff_uflow    (_connected_to_tx_ff_uflow_),    //  output,   width = 1,                              .tx_ff_uflow
		.ff_tx_a_full   (_connected_to_ff_tx_a_full_),   //  output,   width = 1,                              .ff_tx_a_full
		.ff_tx_a_empty  (_connected_to_ff_tx_a_empty_),  //  output,   width = 1,                              .ff_tx_a_empty
		.rx_err_stat    (_connected_to_rx_err_stat_),    //  output,  width = 18,                              .rx_err_stat
		.rx_frm_type    (_connected_to_rx_frm_type_),    //  output,   width = 4,                              .rx_frm_type
		.ff_rx_dsav     (_connected_to_ff_rx_dsav_),     //  output,   width = 1,                              .ff_rx_dsav
		.ff_rx_a_full   (_connected_to_ff_rx_a_full_),   //  output,   width = 1,                              .ff_rx_a_full
		.ff_rx_a_empty  (_connected_to_ff_rx_a_empty_),  //  output,   width = 1,                              .ff_rx_a_empty
		.clk            (_connected_to_clk_),            //   input,   width = 1, control_port_clock_connection.clk
		.reset          (_connected_to_reset_),          //   input,   width = 1,              reset_connection.reset
		.reg_data_out   (_connected_to_reg_data_out_),   //  output,  width = 32,                  control_port.readdata
		.reg_rd         (_connected_to_reg_rd_),         //   input,   width = 1,                              .read
		.reg_data_in    (_connected_to_reg_data_in_),    //   input,  width = 32,                              .writedata
		.reg_wr         (_connected_to_reg_wr_),         //   input,   width = 1,                              .write
		.reg_busy       (_connected_to_reg_busy_),       //  output,   width = 1,                              .waitrequest
		.reg_addr       (_connected_to_reg_addr_),       //   input,   width = 8,                              .address
		.ref_clk        (_connected_to_ref_clk_),        //   input,   width = 1,  pcs_ref_clk_clock_connection.clk
		.led_crs        (_connected_to_led_crs_),        //  output,   width = 1,         status_led_connection.crs
		.led_link       (_connected_to_led_link_),       //  output,   width = 1,                              .link
		.led_panel_link (_connected_to_led_panel_link_), //  output,   width = 1,                              .panel_link
		.led_col        (_connected_to_led_col_),        //  output,   width = 1,                              .col
		.led_an         (_connected_to_led_an_),         //  output,   width = 1,                              .an
		.led_char_err   (_connected_to_led_char_err_),   //  output,   width = 1,                              .char_err
		.led_disp_err   (_connected_to_led_disp_err_),   //  output,   width = 1,                              .disp_err
		.rx_recovclkout (_connected_to_rx_recovclkout_), //  output,   width = 1,     serdes_control_connection.export
		.rxp            (_connected_to_rxp_),            //   input,   width = 1,             serial_connection.rxp_0
		.txp            (_connected_to_txp_)             //  output,   width = 1,                              .txp_0
	);

