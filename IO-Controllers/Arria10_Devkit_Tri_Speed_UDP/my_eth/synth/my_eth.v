// my_eth.v

// Generated using ACDS version 19.3 222

`timescale 1 ps / 1 ps
module my_eth (
		output wire [31:0] control_port_readdata,    //     control_port.readdata
		input  wire        control_port_read,        //                 .read
		input  wire [31:0] control_port_writedata,   //                 .writedata
		input  wire        control_port_write,       //                 .write
		output wire        control_port_waitrequest, //                 .waitrequest
		input  wire [7:0]  control_port_address,     //                 .address
		input  wire        control_port_clk_clk,     // control_port_clk.clk
		input  wire        mac_misc_xon_gen,         //         mac_misc.xon_gen
		input  wire        mac_misc_xoff_gen,        //                 .xoff_gen
		input  wire        mac_misc_ff_tx_crc_fwd,   //                 .ff_tx_crc_fwd
		output wire        mac_misc_ff_tx_septy,     //                 .ff_tx_septy
		output wire        mac_misc_tx_ff_uflow,     //                 .tx_ff_uflow
		output wire        mac_misc_ff_tx_a_full,    //                 .ff_tx_a_full
		output wire        mac_misc_ff_tx_a_empty,   //                 .ff_tx_a_empty
		output wire [17:0] mac_misc_rx_err_stat,     //                 .rx_err_stat
		output wire [3:0]  mac_misc_rx_frm_type,     //                 .rx_frm_type
		output wire        mac_misc_ff_rx_dsav,      //                 .ff_rx_dsav
		output wire        mac_misc_ff_rx_a_full,    //                 .ff_rx_a_full
		output wire        mac_misc_ff_rx_a_empty,   //                 .ff_rx_a_empty
		input  wire        pcs_ref_clk_clk,          //      pcs_ref_clk.clk
		output wire [31:0] receive_data,             //          receive.data
		output wire        receive_endofpacket,      //                 .endofpacket
		output wire [5:0]  receive_error,            //                 .error
		output wire [1:0]  receive_empty,            //                 .empty
		input  wire        receive_ready,            //                 .ready
		output wire        receive_startofpacket,    //                 .startofpacket
		output wire        receive_valid,            //                 .valid
		input  wire        receive_clk_clk,          //      receive_clk.clk
		input  wire        reset_reset,              //            reset.reset
		output wire        serdes_export,            //           serdes.export
		input  wire        serial_rxp_0,             //           serial.rxp_0
		output wire        serial_txp_0,             //                 .txp_0
		output wire        status_led_crs,           //       status_led.crs
		output wire        status_led_link,          //                 .link
		output wire        status_led_panel_link,    //                 .panel_link
		output wire        status_led_col,           //                 .col
		output wire        status_led_an,            //                 .an
		output wire        status_led_char_err,      //                 .char_err
		output wire        status_led_disp_err,      //                 .disp_err
		input  wire [31:0] transmit_data,            //         transmit.data
		input  wire        transmit_endofpacket,     //                 .endofpacket
		input  wire        transmit_error,           //                 .error
		input  wire [1:0]  transmit_empty,           //                 .empty
		output wire        transmit_ready,           //                 .ready
		input  wire        transmit_startofpacket,   //                 .startofpacket
		input  wire        transmit_valid,           //                 .valid
		input  wire        transmit_clk_clk          //     transmit_clk.clk
	);

	my_eth_eth_tse_0 eth_tse_0 (
		.reg_data_out   (control_port_readdata),    //  output,  width = 32,                  control_port.readdata
		.reg_rd         (control_port_read),        //   input,   width = 1,                              .read
		.reg_data_in    (control_port_writedata),   //   input,  width = 32,                              .writedata
		.reg_wr         (control_port_write),       //   input,   width = 1,                              .write
		.reg_busy       (control_port_waitrequest), //  output,   width = 1,                              .waitrequest
		.reg_addr       (control_port_address),     //   input,   width = 8,                              .address
		.clk            (control_port_clk_clk),     //   input,   width = 1, control_port_clock_connection.clk
		.xon_gen        (mac_misc_xon_gen),         //   input,   width = 1,           mac_misc_connection.xon_gen
		.xoff_gen       (mac_misc_xoff_gen),        //   input,   width = 1,                              .xoff_gen
		.ff_tx_crc_fwd  (mac_misc_ff_tx_crc_fwd),   //   input,   width = 1,                              .ff_tx_crc_fwd
		.ff_tx_septy    (mac_misc_ff_tx_septy),     //  output,   width = 1,                              .ff_tx_septy
		.tx_ff_uflow    (mac_misc_tx_ff_uflow),     //  output,   width = 1,                              .tx_ff_uflow
		.ff_tx_a_full   (mac_misc_ff_tx_a_full),    //  output,   width = 1,                              .ff_tx_a_full
		.ff_tx_a_empty  (mac_misc_ff_tx_a_empty),   //  output,   width = 1,                              .ff_tx_a_empty
		.rx_err_stat    (mac_misc_rx_err_stat),     //  output,  width = 18,                              .rx_err_stat
		.rx_frm_type    (mac_misc_rx_frm_type),     //  output,   width = 4,                              .rx_frm_type
		.ff_rx_dsav     (mac_misc_ff_rx_dsav),      //  output,   width = 1,                              .ff_rx_dsav
		.ff_rx_a_full   (mac_misc_ff_rx_a_full),    //  output,   width = 1,                              .ff_rx_a_full
		.ff_rx_a_empty  (mac_misc_ff_rx_a_empty),   //  output,   width = 1,                              .ff_rx_a_empty
		.ref_clk        (pcs_ref_clk_clk),          //   input,   width = 1,  pcs_ref_clk_clock_connection.clk
		.ff_rx_data     (receive_data),             //  output,  width = 32,                       receive.data
		.ff_rx_eop      (receive_endofpacket),      //  output,   width = 1,                              .endofpacket
		.rx_err         (receive_error),            //  output,   width = 6,                              .error
		.ff_rx_mod      (receive_empty),            //  output,   width = 2,                              .empty
		.ff_rx_rdy      (receive_ready),            //   input,   width = 1,                              .ready
		.ff_rx_sop      (receive_startofpacket),    //  output,   width = 1,                              .startofpacket
		.ff_rx_dval     (receive_valid),            //  output,   width = 1,                              .valid
		.ff_rx_clk      (receive_clk_clk),          //   input,   width = 1,      receive_clock_connection.clk
		.reset          (reset_reset),              //   input,   width = 1,              reset_connection.reset
		.rx_recovclkout (serdes_export),            //  output,   width = 1,     serdes_control_connection.export
		.rxp            (serial_rxp_0),             //   input,   width = 1,             serial_connection.rxp_0
		.txp            (serial_txp_0),             //  output,   width = 1,                              .txp_0
		.led_crs        (status_led_crs),           //  output,   width = 1,         status_led_connection.crs
		.led_link       (status_led_link),          //  output,   width = 1,                              .link
		.led_panel_link (status_led_panel_link),    //  output,   width = 1,                              .panel_link
		.led_col        (status_led_col),           //  output,   width = 1,                              .col
		.led_an         (status_led_an),            //  output,   width = 1,                              .an
		.led_char_err   (status_led_char_err),      //  output,   width = 1,                              .char_err
		.led_disp_err   (status_led_disp_err),      //  output,   width = 1,                              .disp_err
		.ff_tx_data     (transmit_data),            //   input,  width = 32,                      transmit.data
		.ff_tx_eop      (transmit_endofpacket),     //   input,   width = 1,                              .endofpacket
		.ff_tx_err      (transmit_error),           //   input,   width = 1,                              .error
		.ff_tx_mod      (transmit_empty),           //   input,   width = 2,                              .empty
		.ff_tx_rdy      (transmit_ready),           //  output,   width = 1,                              .ready
		.ff_tx_sop      (transmit_startofpacket),   //   input,   width = 1,                              .startofpacket
		.ff_tx_wren     (transmit_valid),           //   input,   width = 1,                              .valid
		.ff_tx_clk      (transmit_clk_clk)          //   input,   width = 1,     transmit_clock_connection.clk
	);

endmodule
