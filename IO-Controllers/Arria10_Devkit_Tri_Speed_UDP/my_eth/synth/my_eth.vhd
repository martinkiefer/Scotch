-- my_eth.vhd

-- Generated using ACDS version 19.3 222

library IEEE;
library my_eth_eth_tse_0;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_eth is
	port (
		control_port_readdata    : out std_logic_vector(31 downto 0);                    --     control_port.readdata
		control_port_read        : in  std_logic                     := '0';             --                 .read
		control_port_writedata   : in  std_logic_vector(31 downto 0) := (others => '0'); --                 .writedata
		control_port_write       : in  std_logic                     := '0';             --                 .write
		control_port_waitrequest : out std_logic;                                        --                 .waitrequest
		control_port_address     : in  std_logic_vector(7 downto 0)  := (others => '0'); --                 .address
		control_port_clk_clk     : in  std_logic                     := '0';             -- control_port_clk.clk
		mac_misc_xon_gen         : in  std_logic                     := '0';             --         mac_misc.xon_gen
		mac_misc_xoff_gen        : in  std_logic                     := '0';             --                 .xoff_gen
		mac_misc_ff_tx_crc_fwd   : in  std_logic                     := '0';             --                 .ff_tx_crc_fwd
		mac_misc_ff_tx_septy     : out std_logic;                                        --                 .ff_tx_septy
		mac_misc_tx_ff_uflow     : out std_logic;                                        --                 .tx_ff_uflow
		mac_misc_ff_tx_a_full    : out std_logic;                                        --                 .ff_tx_a_full
		mac_misc_ff_tx_a_empty   : out std_logic;                                        --                 .ff_tx_a_empty
		mac_misc_rx_err_stat     : out std_logic_vector(17 downto 0);                    --                 .rx_err_stat
		mac_misc_rx_frm_type     : out std_logic_vector(3 downto 0);                     --                 .rx_frm_type
		mac_misc_ff_rx_dsav      : out std_logic;                                        --                 .ff_rx_dsav
		mac_misc_ff_rx_a_full    : out std_logic;                                        --                 .ff_rx_a_full
		mac_misc_ff_rx_a_empty   : out std_logic;                                        --                 .ff_rx_a_empty
		pcs_ref_clk_clk          : in  std_logic                     := '0';             --      pcs_ref_clk.clk
		receive_data             : out std_logic_vector(31 downto 0);                    --          receive.data
		receive_endofpacket      : out std_logic;                                        --                 .endofpacket
		receive_error            : out std_logic_vector(5 downto 0);                     --                 .error
		receive_empty            : out std_logic_vector(1 downto 0);                     --                 .empty
		receive_ready            : in  std_logic                     := '0';             --                 .ready
		receive_startofpacket    : out std_logic;                                        --                 .startofpacket
		receive_valid            : out std_logic;                                        --                 .valid
		receive_clk_clk          : in  std_logic                     := '0';             --      receive_clk.clk
		reset_reset              : in  std_logic                     := '0';             --            reset.reset
		serdes_export            : out std_logic;                                        --           serdes.export
		serial_rxp_0             : in  std_logic                     := '0';             --           serial.rxp_0
		serial_txp_0             : out std_logic;                                        --                 .txp_0
		status_led_crs           : out std_logic;                                        --       status_led.crs
		status_led_link          : out std_logic;                                        --                 .link
		status_led_panel_link    : out std_logic;                                        --                 .panel_link
		status_led_col           : out std_logic;                                        --                 .col
		status_led_an            : out std_logic;                                        --                 .an
		status_led_char_err      : out std_logic;                                        --                 .char_err
		status_led_disp_err      : out std_logic;                                        --                 .disp_err
		transmit_data            : in  std_logic_vector(31 downto 0) := (others => '0'); --         transmit.data
		transmit_endofpacket     : in  std_logic                     := '0';             --                 .endofpacket
		transmit_error           : in  std_logic                     := '0';             --                 .error
		transmit_empty           : in  std_logic_vector(1 downto 0)  := (others => '0'); --                 .empty
		transmit_ready           : out std_logic;                                        --                 .ready
		transmit_startofpacket   : in  std_logic                     := '0';             --                 .startofpacket
		transmit_valid           : in  std_logic                     := '0';             --                 .valid
		transmit_clk_clk         : in  std_logic                     := '0'              --     transmit_clk.clk
	);
end entity my_eth;

architecture rtl of my_eth is
	component my_eth_eth_tse_0_cmp is
		port (
			reg_data_out   : out std_logic_vector(31 downto 0);                    -- readdata
			reg_rd         : in  std_logic                     := 'X';             -- read
			reg_data_in    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reg_wr         : in  std_logic                     := 'X';             -- write
			reg_busy       : out std_logic;                                        -- waitrequest
			reg_addr       : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			clk            : in  std_logic                     := 'X';             -- clk
			xon_gen        : in  std_logic                     := 'X';             -- xon_gen
			xoff_gen       : in  std_logic                     := 'X';             -- xoff_gen
			ff_tx_crc_fwd  : in  std_logic                     := 'X';             -- ff_tx_crc_fwd
			ff_tx_septy    : out std_logic;                                        -- ff_tx_septy
			tx_ff_uflow    : out std_logic;                                        -- tx_ff_uflow
			ff_tx_a_full   : out std_logic;                                        -- ff_tx_a_full
			ff_tx_a_empty  : out std_logic;                                        -- ff_tx_a_empty
			rx_err_stat    : out std_logic_vector(17 downto 0);                    -- rx_err_stat
			rx_frm_type    : out std_logic_vector(3 downto 0);                     -- rx_frm_type
			ff_rx_dsav     : out std_logic;                                        -- ff_rx_dsav
			ff_rx_a_full   : out std_logic;                                        -- ff_rx_a_full
			ff_rx_a_empty  : out std_logic;                                        -- ff_rx_a_empty
			ref_clk        : in  std_logic                     := 'X';             -- clk
			ff_rx_data     : out std_logic_vector(31 downto 0);                    -- data
			ff_rx_eop      : out std_logic;                                        -- endofpacket
			rx_err         : out std_logic_vector(5 downto 0);                     -- error
			ff_rx_mod      : out std_logic_vector(1 downto 0);                     -- empty
			ff_rx_rdy      : in  std_logic                     := 'X';             -- ready
			ff_rx_sop      : out std_logic;                                        -- startofpacket
			ff_rx_dval     : out std_logic;                                        -- valid
			ff_rx_clk      : in  std_logic                     := 'X';             -- clk
			reset          : in  std_logic                     := 'X';             -- reset
			rx_recovclkout : out std_logic;                                        -- export
			rxp            : in  std_logic                     := 'X';             -- rxp_0
			txp            : out std_logic;                                        -- txp_0
			led_crs        : out std_logic;                                        -- crs
			led_link       : out std_logic;                                        -- link
			led_panel_link : out std_logic;                                        -- panel_link
			led_col        : out std_logic;                                        -- col
			led_an         : out std_logic;                                        -- an
			led_char_err   : out std_logic;                                        -- char_err
			led_disp_err   : out std_logic;                                        -- disp_err
			ff_tx_data     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- data
			ff_tx_eop      : in  std_logic                     := 'X';             -- endofpacket
			ff_tx_err      : in  std_logic                     := 'X';             -- error
			ff_tx_mod      : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			ff_tx_rdy      : out std_logic;                                        -- ready
			ff_tx_sop      : in  std_logic                     := 'X';             -- startofpacket
			ff_tx_wren     : in  std_logic                     := 'X';             -- valid
			ff_tx_clk      : in  std_logic                     := 'X'              -- clk
		);
	end component my_eth_eth_tse_0_cmp;

	for eth_tse_0 : my_eth_eth_tse_0_cmp
		use entity my_eth_eth_tse_0.my_eth_eth_tse_0;
begin

	eth_tse_0 : component my_eth_eth_tse_0_cmp
		port map (
			reg_data_out   => control_port_readdata,    --                  control_port.readdata
			reg_rd         => control_port_read,        --                              .read
			reg_data_in    => control_port_writedata,   --                              .writedata
			reg_wr         => control_port_write,       --                              .write
			reg_busy       => control_port_waitrequest, --                              .waitrequest
			reg_addr       => control_port_address,     --                              .address
			clk            => control_port_clk_clk,     -- control_port_clock_connection.clk
			xon_gen        => mac_misc_xon_gen,         --           mac_misc_connection.xon_gen
			xoff_gen       => mac_misc_xoff_gen,        --                              .xoff_gen
			ff_tx_crc_fwd  => mac_misc_ff_tx_crc_fwd,   --                              .ff_tx_crc_fwd
			ff_tx_septy    => mac_misc_ff_tx_septy,     --                              .ff_tx_septy
			tx_ff_uflow    => mac_misc_tx_ff_uflow,     --                              .tx_ff_uflow
			ff_tx_a_full   => mac_misc_ff_tx_a_full,    --                              .ff_tx_a_full
			ff_tx_a_empty  => mac_misc_ff_tx_a_empty,   --                              .ff_tx_a_empty
			rx_err_stat    => mac_misc_rx_err_stat,     --                              .rx_err_stat
			rx_frm_type    => mac_misc_rx_frm_type,     --                              .rx_frm_type
			ff_rx_dsav     => mac_misc_ff_rx_dsav,      --                              .ff_rx_dsav
			ff_rx_a_full   => mac_misc_ff_rx_a_full,    --                              .ff_rx_a_full
			ff_rx_a_empty  => mac_misc_ff_rx_a_empty,   --                              .ff_rx_a_empty
			ref_clk        => pcs_ref_clk_clk,          --  pcs_ref_clk_clock_connection.clk
			ff_rx_data     => receive_data,             --                       receive.data
			ff_rx_eop      => receive_endofpacket,      --                              .endofpacket
			rx_err         => receive_error,            --                              .error
			ff_rx_mod      => receive_empty,            --                              .empty
			ff_rx_rdy      => receive_ready,            --                              .ready
			ff_rx_sop      => receive_startofpacket,    --                              .startofpacket
			ff_rx_dval     => receive_valid,            --                              .valid
			ff_rx_clk      => receive_clk_clk,          --      receive_clock_connection.clk
			reset          => reset_reset,              --              reset_connection.reset
			rx_recovclkout => serdes_export,            --     serdes_control_connection.export
			rxp            => serial_rxp_0,             --             serial_connection.rxp_0
			txp            => serial_txp_0,             --                              .txp_0
			led_crs        => status_led_crs,           --         status_led_connection.crs
			led_link       => status_led_link,          --                              .link
			led_panel_link => status_led_panel_link,    --                              .panel_link
			led_col        => status_led_col,           --                              .col
			led_an         => status_led_an,            --                              .an
			led_char_err   => status_led_char_err,      --                              .char_err
			led_disp_err   => status_led_disp_err,      --                              .disp_err
			ff_tx_data     => transmit_data,            --                      transmit.data
			ff_tx_eop      => transmit_endofpacket,     --                              .endofpacket
			ff_tx_err      => transmit_error,           --                              .error
			ff_tx_mod      => transmit_empty,           --                              .empty
			ff_tx_rdy      => transmit_ready,           --                              .ready
			ff_tx_sop      => transmit_startofpacket,   --                              .startofpacket
			ff_tx_wren     => transmit_valid,           --                              .valid
			ff_tx_clk      => transmit_clk_clk          --     transmit_clock_connection.clk
		);

end architecture rtl; -- of my_eth
