	my_eth u0 (
		.control_port_readdata    (_connected_to_control_port_readdata_),    //  output,  width = 32,     control_port.readdata
		.control_port_read        (_connected_to_control_port_read_),        //   input,   width = 1,                 .read
		.control_port_writedata   (_connected_to_control_port_writedata_),   //   input,  width = 32,                 .writedata
		.control_port_write       (_connected_to_control_port_write_),       //   input,   width = 1,                 .write
		.control_port_waitrequest (_connected_to_control_port_waitrequest_), //  output,   width = 1,                 .waitrequest
		.control_port_address     (_connected_to_control_port_address_),     //   input,   width = 8,                 .address
		.control_port_clk_clk     (_connected_to_control_port_clk_clk_),     //   input,   width = 1, control_port_clk.clk
		.mac_misc_xon_gen         (_connected_to_mac_misc_xon_gen_),         //   input,   width = 1,         mac_misc.xon_gen
		.mac_misc_xoff_gen        (_connected_to_mac_misc_xoff_gen_),        //   input,   width = 1,                 .xoff_gen
		.mac_misc_ff_tx_crc_fwd   (_connected_to_mac_misc_ff_tx_crc_fwd_),   //   input,   width = 1,                 .ff_tx_crc_fwd
		.mac_misc_ff_tx_septy     (_connected_to_mac_misc_ff_tx_septy_),     //  output,   width = 1,                 .ff_tx_septy
		.mac_misc_tx_ff_uflow     (_connected_to_mac_misc_tx_ff_uflow_),     //  output,   width = 1,                 .tx_ff_uflow
		.mac_misc_ff_tx_a_full    (_connected_to_mac_misc_ff_tx_a_full_),    //  output,   width = 1,                 .ff_tx_a_full
		.mac_misc_ff_tx_a_empty   (_connected_to_mac_misc_ff_tx_a_empty_),   //  output,   width = 1,                 .ff_tx_a_empty
		.mac_misc_rx_err_stat     (_connected_to_mac_misc_rx_err_stat_),     //  output,  width = 18,                 .rx_err_stat
		.mac_misc_rx_frm_type     (_connected_to_mac_misc_rx_frm_type_),     //  output,   width = 4,                 .rx_frm_type
		.mac_misc_ff_rx_dsav      (_connected_to_mac_misc_ff_rx_dsav_),      //  output,   width = 1,                 .ff_rx_dsav
		.mac_misc_ff_rx_a_full    (_connected_to_mac_misc_ff_rx_a_full_),    //  output,   width = 1,                 .ff_rx_a_full
		.mac_misc_ff_rx_a_empty   (_connected_to_mac_misc_ff_rx_a_empty_),   //  output,   width = 1,                 .ff_rx_a_empty
		.pcs_ref_clk_clk          (_connected_to_pcs_ref_clk_clk_),          //   input,   width = 1,      pcs_ref_clk.clk
		.receive_data             (_connected_to_receive_data_),             //  output,  width = 32,          receive.data
		.receive_endofpacket      (_connected_to_receive_endofpacket_),      //  output,   width = 1,                 .endofpacket
		.receive_error            (_connected_to_receive_error_),            //  output,   width = 6,                 .error
		.receive_empty            (_connected_to_receive_empty_),            //  output,   width = 2,                 .empty
		.receive_ready            (_connected_to_receive_ready_),            //   input,   width = 1,                 .ready
		.receive_startofpacket    (_connected_to_receive_startofpacket_),    //  output,   width = 1,                 .startofpacket
		.receive_valid            (_connected_to_receive_valid_),            //  output,   width = 1,                 .valid
		.receive_clk_clk          (_connected_to_receive_clk_clk_),          //   input,   width = 1,      receive_clk.clk
		.reset_reset              (_connected_to_reset_reset_),              //   input,   width = 1,            reset.reset
		.serdes_export            (_connected_to_serdes_export_),            //  output,   width = 1,           serdes.export
		.serial_rxp_0             (_connected_to_serial_rxp_0_),             //   input,   width = 1,           serial.rxp_0
		.serial_txp_0             (_connected_to_serial_txp_0_),             //  output,   width = 1,                 .txp_0
		.status_led_crs           (_connected_to_status_led_crs_),           //  output,   width = 1,       status_led.crs
		.status_led_link          (_connected_to_status_led_link_),          //  output,   width = 1,                 .link
		.status_led_panel_link    (_connected_to_status_led_panel_link_),    //  output,   width = 1,                 .panel_link
		.status_led_col           (_connected_to_status_led_col_),           //  output,   width = 1,                 .col
		.status_led_an            (_connected_to_status_led_an_),            //  output,   width = 1,                 .an
		.status_led_char_err      (_connected_to_status_led_char_err_),      //  output,   width = 1,                 .char_err
		.status_led_disp_err      (_connected_to_status_led_disp_err_),      //  output,   width = 1,                 .disp_err
		.transmit_data            (_connected_to_transmit_data_),            //   input,  width = 32,         transmit.data
		.transmit_endofpacket     (_connected_to_transmit_endofpacket_),     //   input,   width = 1,                 .endofpacket
		.transmit_error           (_connected_to_transmit_error_),           //   input,   width = 1,                 .error
		.transmit_empty           (_connected_to_transmit_empty_),           //   input,   width = 2,                 .empty
		.transmit_ready           (_connected_to_transmit_ready_),           //  output,   width = 1,                 .ready
		.transmit_startofpacket   (_connected_to_transmit_startofpacket_),   //   input,   width = 1,                 .startofpacket
		.transmit_valid           (_connected_to_transmit_valid_),           //   input,   width = 1,                 .valid
		.transmit_clk_clk         (_connected_to_transmit_clk_clk_)          //   input,   width = 1,     transmit_clk.clk
	);

